filter(loc_type == "child") %>%
distinct(loc_id) %>%
rename(child = loc_id)
children <- sensor_data %>%
filter(local_type == "child") %>%
distinct(loc_id) %>%
rename(child = loc_id)
View(children)
children <- sensor_data %>%
filter(remote_type == "child") %>%
distinct(rem_id) %>%
rename(child = rem_id)
interactions <- sensor_data %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))) %>%
rename(to = loc_id, from = rem_id)
View(interactions)
interactions <- sensor_data %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
interactions <- sensor_data %>%
filter(local_type == "child" | remote_type == "child") %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
children <- sensor_data %>%
filter(local_type == "child", remote_type == "child") %>%
distinct(loc_id) %>%
rename(child = loc_id)
interactions <- sensor_data %>%
filter(local_type == "child" & remote_type == "child") %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
plot(school_graph, layout = layout_with_fr(school_graph, weights = edges$weight))
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight))
plot(school_graph, layout = layout_with_gem(school_graph, weights = interactions$weight))
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight))
interactions <- sensor_data %>%
filter(local_type == "child" & remote_type == "child") %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))^2) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight))
children <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
distinct(loc_id) %>%
rename(child = loc_id)
interactions <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))^2) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight))
plot(school_graph, layout = layout_with_dh(school_graph, weights = interactions$weight))
plot(school_graph, layout = layout_with_dh(school_graph))
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight), margin(0, 0, 0, 0))
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight), margin = c(0, 0, 0, 0))
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight))
strength(school_graph)
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight), size = strength(school_graph))
strength(school_graph)
sizes <- strength(school_graph)
plot(school_graph, layout = layout_with_fr(school_graph, weights = interactions$weight), size = sizes)
plot(school_graph, size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph) / max(strength(school_graph))
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph) / (max(strength(school_graph) * 15) )
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph) / (max(strength(school_graph))*15)
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph) / (max(strength(school_graph))*30)
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph)
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- log(strength(school_graph))
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph)
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph)
sizes
sizes <- strength(school_graph) / 2
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
sizes <- strength(school_graph) / 3
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
child_ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
View(child_ping_dist)
child_ping_dist <- sensor_data %>%
filter(local_type == "child") %>%
group_by(loc_id) %>%
summarise(pings = n())
View(child_ping_dist)
ggplot(child_ping_dist, aes(x = pings)) +
geom_histogram()
plot_child_ts <- function(loc_id){
selected_child = loc_id
ggplot(filter(sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
plot_child_ts("child_11060")
plot_child_ts("child_11062")
plot_child_ts("child_47423")
plot_ping_dist <- function(filt){
if(filt){
ping_dist <- sensor_data %>%
filter(local_type == filt) %>%
group_by(loc_id) %>%
summarise(pings = n())
} else {
ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
}
ggplot(ping_dist, aes(x = pings)) +
geom_histogram()
}
plot_ping_dist <- function(sensor_data, filt){
if(filt){
ping_dist <- sensor_data %>%
filter(local_type == filt) %>%
group_by(loc_id) %>%
summarise(pings = n())
} else {
ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
}
ggplot(ping_dist, aes(x = pings)) +
geom_histogram()
}
plot_ping_dist()
plot_ping_dist <- function(sensor_data){
if(missing(filt)){
ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
} else {
ping_dist <- sensor_data %>%
filter(local_type == filt) %>%
group_by(loc_id) %>%
summarise(pings = n())
}
ggplot(ping_dist, aes(x = pings)) +
geom_histogram()
}
plot_ping_dist(sensor_data)
plot_ping_dist <- function(sensor_data, filt){
if(missing(filt)){
ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
} else {
ping_dist <- sensor_data %>%
filter(local_type == filt) %>%
group_by(loc_id) %>%
summarise(pings = n())
}
ggplot(ping_dist, aes(x = pings)) +
geom_histogram()
}
plot_ping_dist(sensor_data)
ggplot(ping_dist, aes(x = pings, color = as.factor(local_type))) +
geom_histogram() +
facet_wrap(~local_type)
ping_dist <- sensor_data %>%
group_by(loc_id) %>%
summarise(pings = n())
ggplot(ping_dist, aes(x = pings, color = as.factor(local_type))) +
geom_histogram() +
facet_wrap(~local_type)
ping_dist <- sensor_data %>%
group_by(loc_id, local_type) %>%
summarise(pings = n())
ggplot(ping_dist, aes(x = pings, color = as.factor(local_type))) +
geom_histogram() +
facet_wrap(~local_type)
ggplot(ping_dist, aes(x = pings, fill = as.factor(local_type))) +
geom_histogram() +
facet_wrap(~local_type)
ping_dist <- sensor_data %>%
group_by(loc_id, local_type) %>%
summarise(pings = n()) %>%
arrange(pings)
View(ping_dist)
plot_child_ts("child_11062")
plot_child_ts <- function(loc_id, save_flag = FALSE){
selected_child = loc_id
ggplot(filter(sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
}
plot_child_ts("child_11062")
plot_child_ts <- function(loc_id, save_flag = FALSE){
selected_child = loc_id
p <- ggplot(filter(sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
plot_child_ts("child_11062")
plot_child_ts("child_47423")
plot_child_ts <- function(sensor_data, loc_id, save_flag = FALSE){
selected_child = loc_id
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(distinct_loc_ids, distinct_times)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
p <- ggplot(filter(new_sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
plot_child_ts(sensor_data, "child_11060")
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(distinct_loc_ids, distinct_times)
View(distinct_id_time)
distinct_id_time <- expand.grid(distinct_loc_ids$loc_id, distinct_times$time)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
View(distinct_id_time)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
time = distinct_times$time)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
ggplot(filter(new_sensor_data, loc_id == "child_11060"), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
View(new_sensor_data)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
rem_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
ggplot(filter(new_sensor_data, loc_id == "child_11060"), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
plot_child_ts <- function(sensor_data, loc_id, save_flag = FALSE){
selected_child = loc_id
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
rem_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
p <- ggplot(filter(new_sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
rm(list = ls())
library(tidyverse)
library(lubridate)
library(jsonlite)
library(igraph)
#Read in sensor data
sensor_data <- fromJSON('./input_data/sensor_data.json') %>% as.data.frame()
#Create unique sensor id's
sensor_data <- sensor_data %>%
unite("loc_id", c("local_type", "local_id"), remove = FALSE) %>%
unite("rem_id", c("remote_type", "remote_id"), remove = FALSE)
#Let's see if we can learn anything about the average distance to the various other sensors. We'll define a function that takes in the RSSI signal and gives us back a distance estimate.
rssi_to_dist <- function(rssi){
intercept = -64.0
slope = -20.0
return(
10 ^ ((rssi - intercept) / slope)
)
}
sensor_data <- sensor_data %>%
mutate(dist = rssi_to_dist(rssi),
time = ymd_hms(observed_at))
#Let's pick a random child, and look at all his/her interactions. I'm going to pick child 11060, just because he/she appears in the initial sensor readings.
plot_child_ts <- function(sensor_data, loc_id, save_flag = FALSE){
selected_child = loc_id
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
rem_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
p <- ggplot(filter(new_sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line() +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
plot_child_ts(sensor_data, "child_11060")
plot_child_ts <- function(sensor_data, loc_id, save_flag = FALSE){
selected_child = loc_id
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
rem_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data)
p <- ggplot(filter(new_sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line(color = 'blue') +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
plot_child_ts(sensor_data, "child_11060")
plot_child_ts(sensor_data, "child_11062")
plot_child_ts(sensor_data, "child_11062")
plot_child_ts(sensor_data, "child_47423")
plot_child_ts(sensor_data, "child_11060")
plot_child_ts(sensor_data, "child_11061")
plot_child_ts(sensor_data, "child_62459")
p1 <- plot_child_ts(sensor_data, "child_62459")
p1 + facet_grid(~remote_type)
p1 + facet_grid(rem_id~remote_type)
plot_child_ts <- function(sensor_data, loc_id, save_flag = FALSE){
selected_child = loc_id
distinct_loc_ids <- sensor_data %>%
distinct(loc_id)
distinct_times <- sensor_data %>%
distinct(time)
distinct_id_time <- expand.grid(loc_id = distinct_loc_ids$loc_id,
rem_id = distinct_loc_ids$loc_id,
time = distinct_times$time,
stringsAsFactors = FALSE)
new_sensor_data <- left_join(distinct_id_time, sensor_data) %>%
arrange(remote_type)
p <- ggplot(filter(new_sensor_data, loc_id == selected_child), aes(x = time, y = dist)) +
geom_line(color = 'blue') +
facet_wrap(~rem_id)
if(save_flag){
ggsave(filename = paste('./graphics/', selected_child, '_ts'), device = "pdf")
}
return(p)
}
plot_child_ts(sensor_data, "child_11062")
plot_child_ts(sensor_data, "child_47423")
#Now let's contrast that with child_11061, who actually had the most sensor pings of the children.
plot_child_ts(sensor_data, "child_11061")
#Is child_11061 friends with child_62459? That's what the consistent, low-distance pings would seem to suggest. The child also seems to have spent a fair amount of time with teacher_5612, and in area_11. Let's take a look at child_62459 to see if the relationship is recorded reciprocally.
plot_child_ts(sensor_data, "child_62459")
#Pretty noisy. It seems like there's probably a lot more information about proximity from the frequency of pings than there is from the strength of the rssi signal.
#Let's try looking at it as a distribution instead.
ggplot(filter(sensor_data, loc_id == selected_child), aes(x = dist)) +
geom_histogram() +
facet_wrap(~rem_id)
ggsave(filename = paste('./graphics/', selected_child, '_hist'), device = "pdf")
#This looks a bit more informative, since now we have ping counts and distance information together. Are we seeing particular children with which child_11060 played? Particular materials, and an area near which the child interacted with those materials?
#Let's try a social graph of the children and teachers. The nodes of the graph will be the children themselves. The edges we will weight according to the number of sensor pings between the children, the pings themselves will be weighted according to the estimated distance^-2 (an arbitrary choice).
children <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
distinct(loc_id) %>%
rename(child = loc_id)
interactions <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))^2) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
sizes <- strength(school_graph) / 3
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
ggplot(filter(sensor_data, loc_id == selected_child), aes(x = dist)) +
geom_histogram() +
facet_wrap(~rem_id)
ggplot(filter(sensor_data, loc_id == "selected_child"), aes(x = dist)) +
geom_histogram() +
facet_wrap(~rem_id)
ggplot(filter(sensor_data, loc_id == "child_11060"), aes(x = dist)) +
geom_histogram() +
facet_wrap(~rem_id)
#This looks a bit more informative, since now we have ping counts and distance information together. Are we seeing particular children with which child_11060 played? Particular materials, and an area near which the child interacted with those materials?
#Let's try a social graph of the children and teachers. The nodes of the graph will be the children themselves. The edges we will weight according to the number of sensor pings between the children, the pings themselves will be weighted according to the estimated distance^-2 (an arbitrary choice).
children <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
distinct(loc_id) %>%
rename(child = loc_id)
interactions <- sensor_data %>%
filter(local_type %in% c("child", "teacher"), remote_type == c("child", "teacher")) %>%
group_by(loc_id, rem_id) %>%
summarise(pings = n(),
ping_weight = 1 / (mean(dist))^2) %>%
mutate(weight = pings * ping_weight) %>%
rename(to = loc_id, from = rem_id)
school_graph <- graph_from_data_frame(interactions, directed = FALSE, vertices = children)
sizes <- strength(school_graph) / 3
plot(school_graph, vertex.size = sizes, layout = layout_with_fr(school_graph, weights = interactions$weight))
?igraph.plotting
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
vertex.label.cex = .5)
#What about child_47425, the one who appeared off on his/her own in the node graph?
plot_child_ts(sensor_data, "child_47425")
?igraph.plotting
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-.5, -.5, -.5, -.5),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-1, -1, -1, -1),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-1, 0, 0, -1),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-.75, -.75, -.75, -.75),
vertex.label.cex = .5)
?igraph.plotting
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-.75, -.75, -0, -0),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-.75, -.75, -1, -1),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(0, 0, -1, -1),
vertex.label.cex = .5)
plot(school_graph,
vertex.size = sizes,
layout = layout_with_fr(school_graph, weights = interactions$weight),
margin = c(-.75, -.75, -.75, -.75),
vertex.label.cex = .5)
library(tidyverse)
library(lubridate)
library(jsonlite)
library(igraph)
knitr::opts_chunk$set(echo = TRUE)
ping_dist %>% filter(local_type == "child")
ping_dist <- sensor_data %>%
group_by(loc_id, local_type) %>%
summarise(pings = n()) %>%
arrange(pings)
View(ping_dist)
View(ping_dist %>% filter(local_type == "child"))
(choose(4,2) * choose(10, 2)) / choose(50, 2)
?Binomial
dbinom(1, 1/6)
dbinom(1:3, 3, 1/6)
sum(dbinom(1:3, 3, 1/6))
sum(dbinom(1:4, 4, 1/6))
sum(dbinom(1:5, 5, 1/6))
sum(dbinom(2:6, 6, 1/6))
sum(dbinom(2:5, 5, 1/6))
sum(dbinom(1:3, 3, 1/6))
sum(dbinom(1:4, 4, 1/6))
sum(dbinom(2:5, 5, 1/6))
sum(dbinom(2:6, 6, 1/6))
